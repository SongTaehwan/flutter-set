// Autogenerated from Pigeon (v14.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

/// Generated class from Pigeon that represents data sent in messages.
struct SpeechText {
  var text: String

  static func fromList(_ list: [Any?]) -> SpeechText? {
    let text = list[0] as! String

    return SpeechText(
      text: text
    )
  }
  func toList() -> [Any?] {
    return [
      text,
    ]
  }
}
private class SpeechApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return SpeechText.fromList(self.readValue() as! [Any?])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class SpeechApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? SpeechText {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class SpeechApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return SpeechApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return SpeechApiCodecWriter(data: data)
  }
}

class SpeechApiCodec: FlutterStandardMessageCodec {
  static let shared = SpeechApiCodec(readerWriter: SpeechApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol SpeechApi {
  func startRecord() throws -> SpeechText
  func stopRecord() throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class SpeechApiSetup {
  /// The codec used by SpeechApi.
  static var codec: FlutterStandardMessageCodec { SpeechApiCodec.shared }
  /// Sets up an instance of `SpeechApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: SpeechApi?) {
    let startRecordChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.speech_app.SpeechApi.startRecord", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      startRecordChannel.setMessageHandler { _, reply in
        do {
          let result = try api.startRecord()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      startRecordChannel.setMessageHandler(nil)
    }
    let stopRecordChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.speech_app.SpeechApi.stopRecord", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      stopRecordChannel.setMessageHandler { _, reply in
        do {
          try api.stopRecord()
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      stopRecordChannel.setMessageHandler(nil)
    }
  }
}
